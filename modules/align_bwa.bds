#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "module_template.bds"


help == align bwa settings (requirements: -bwa_idx)
param_bwa_aln	:= "-q 5 -l 32 -k 2" 	help Parameters for bwa aln (default: "-q 5 -l 32 -k 2").
bwa_idx 	:= ""			help BWA index (full path prefix of *.bwt file) .
wt_bwa		:= "47h"		help Walltime for bwa (default: 47, 47:00:00).
mem_bwa		:= "12G"	 	help Max. memory for bwa (default: 12G).


grp_color_bwa	:= "salmon"


init_align_bwa()


void init_align_bwa() {

	param_bwa_aln 	= get_conf_val( param_bwa_aln, 	["param_bwa_aln"] )
	bwa_idx 	= get_conf_val( bwa_idx, 	["bwa_idx"] )
	wt_bwa 		= get_conf_val( wt_bwa, 	["wt_bwa"] )
	mem_bwa 	= get_conf_val( mem_bwa, 	["mem_bwa"] )

	print("\n\n== align bwa settings\n")
	print( "Param. for bwa\t\t\t: $param_bwa_aln\n")
	print( "BWA index\t\t\t: $bwa_idx\n" )
	print( "Walltime (bwa)\t\t\t: $wt_bwa\n")
	print( "Max. memory (bwa)\t\t: $mem_bwa\n")
}

void chk_align_bwa() {

	if ( !path_exists("$bwa_idx.bwt") ) error("\nBwa index (-bwa_idx) doesn't exists! (file: $bwa_idx.bwt)\n")
}

string[] bwa( string fastq, string o_dir, string log_o_dir, string group, int nth_bwa ) {

	prefix 	:= replace_dir( rm_ext( fastq, ["fastq","fq"] ), o_dir )
	prefix2 := replace_dir( prefix, log_o_dir )
	bam 	:= "$prefix.bam"
	qc 	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq ]
	out 	:= [ bam, qc ]

	if ( out <- in ) { // compare file timestamps of in and out (to check if job is already done or not)

		sai := bwa_aln( fastq, o_dir, group, nth_bwa )
		wait

		bwa_sam( fastq, sai, o_dir, log_o_dir, group, nth_bwa )
		wait

		sai.rm() // delete intermediate file sai		
	}

	add_task_to_graph( in, out, group, "BWA\\n(SE)", grp_color_bwa )

	return out
}

string[] bwa_PE( string fastq1, string fastq2, string o_dir, string log_o_dir, string group, int nth_bwa ) {

	prefix 	:= replace_dir( rm_ext( fastq1, ["fastq","fq"] ), o_dir ) + ".PE2SE"
	prefix2 := replace_dir( prefix, log_o_dir )
	bam 	:= "$prefix.bam"
	qc 	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq1, fastq2 ]
	out 	:= [ bam, qc ]

	if ( out <- in ) { // compare file timestamps of in and out (to check if job is already done or not)

		nth_bwa_aln := distribute_nonzero( nth_bwa, [1,1] )

		// parallel jobs
		sai1 := bwa_aln( fastq1, o_dir, group+"_1", nth_bwa_aln[0] )
		sai2 := bwa_aln( fastq2, o_dir, group+"_2", nth_bwa_aln[1] )

		wait

		bwa_sam_PE( fastq1, fastq2, sai1, sai2, o_dir, log_o_dir, group, nth_bwa )
		wait
		
		sai1.rm() // delete intermediate file sai1, sai2
		sai2.rm()
	}

	add_task_to_graph( in, out, group, "BWA\\n(PE)", grp_color_bwa )

	return out
}

string bwa_aln( string fastq, string o_dir, string group, int nth_bwa ) {

	prefix 	:= replace_dir( rm_ext( fastq, "fastq" ), o_dir )
	sai 	:= "$prefix.sai"	
	
	in 	:= [ fastq ]
	out 	:= sai

	taskName:= "bwa_aln " + group
	cpus 	:= (nth_bwa==1) ? -1 : nth_bwa;	mem := get_res_mem(mem_bwa,nth_bwa); timeout := get_res_wt(wt_bwa)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		//# Map reads to create raw SAM file
		sys bwa aln $param_bwa_aln -t $nth_bwa $bwa_idx $fastq > $sai

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string[] bwa_sam( string fastq, string sai, string o_dir, string log_o_dir, string group, int nth_bwa ) {

	prefix 	:= replace_dir( rm_ext( fastq, "fastq" ), o_dir )
	prefix2 := replace_dir( prefix, log_o_dir )
	bam 	:= "$prefix.bam"
	qc	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq, sai ]
	out 	:= [ bam, qc ]

	taskName:= "bwa_sam " + group
	cpus 	:= nth_bwa; 	mem := get_res_mem(mem_bwa,nth_bwa);	timeout := get_res_wt(wt_bwa)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		sys bwa samse $bwa_idx $sai $fastq | samtools view -Su - | samtools sort - $prefix
		sys samtools index $bam
		sys samtools flagstat $bam > $qc
		//sys bwa samse $bwa_idx $sai $fastq | samtools view -Su /dev/stdin \
		//	| sambamba sort -t 1 /dev/stdin -o $bam
		//sys sambamba flagstat -t 1 $bam > $qc

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string[] bwa_sam_PE( string fastq1, string fastq2, string sai1, string sai2, string o_dir, string log_o_dir, string group, int nth_bwa ) {

	prefix 	:= replace_dir( rm_ext( fastq1, "fastq" ), o_dir ) + ".PE2SE"
	prefix2 := replace_dir( prefix, log_o_dir )
	sam 	:= "$prefix.sam.gz"
	badcigar:= "$prefix.badReads"
	bam 	:= "$prefix.bam"
	qc	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq1, fastq2, sai1, sai2 ]
	out 	:= [ bam, qc ]

	taskName:= "bwa_sam_PE " + group
	cpus 	:= nth_bwa; 	mem := get_res_mem(mem_bwa,nth_bwa);	timeout := get_res_wt(wt_bwa)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init
		
		sys bwa sampe $bwa_idx $sai1 $sai2 $fastq1 $fastq2 | pigz -p $nth_bwa -nc > $sam

		//# Remove read pairs with bad CIGAR strings and sort by position

		//# Find bad CIGAR read names
		//sys zcat $sam \
		//	| awk 'BEGIN {FS="\t" ; OFS="\t"} ! /^@/ && $6!="*" { cigar=$6; gsub("[0-9]+D","",cigar); n = split(cigar,vals,"[A-Z]"); s = 0; for (i=1;i<=n;i++) s=s+vals[i]; seqlen=length($10) ; if (s!=seqlen) print $1"\t"; }' \
		//	| sort | uniq > $badcigar

		sys pigz -p $nth_bwa -cd $sam \
			| awk 'BEGIN {FS="\t" ; OFS="\t"} ! /^@/ && $6!="*" { cigar=$6; gsub("[0-9]+D","",cigar); n = split(cigar,vals,"[A-Z]"); s = 0; for (i=1;i<=n;i++) s=s+vals[i]; seqlen=length($10) ; if (s!=seqlen) print $1"\t"; }' \
			| sort | uniq > $badcigar

		//# Remove bad CIGAR read pairs
		sys if [ $(cat $badcigar | wc -l) -gt 0 ]; then \
				zcat $sam | grep -v -F -f $badcigar | samtools view -Su - | samtools sort - $prefix; \
			else \
				samtools view -Su $sam | samtools sort - $prefix; \
			fi
		//sys if [ $(cat $badcigar | wc -l) -gt 0 ]; then \
		//		pigz -p $nth_bwa -cd $sam | grep -v -F -f $badcigar | samtools view -Su /dev/stdin \
		//		| sambamba sort -t 1 /dev/stdin -o $bam; \
		//	else \
		//		pigz -p $nth_bwa -cd $sam | samtools view -Su /dev/stdin | sambamba sort -t 1 /dev/stdin -o $bam; \
		//	fi

		sys samtools flagstat $bam > $qc
		sys samtools index $bam

		//sys sambamba flagstat -t 1 > $qc
		
		sys rm -f $badcigar $sam

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}
